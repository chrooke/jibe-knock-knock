{
    "1": {
        "id": 1,
        "class": "Sequence",
        "name": "",
        "decorators": [],
        "children": [
            41,
            "1e9d0b64-7a88-498c-88a0-f7ee381634d6",
            "6c3265de-4a80-430b-b2e9-5e5023f545b6",
            "e62f5c3b-9562-4634-b99d-b06bc5e260a5",
            23,
            "60bad574-869a-4817-94be-d38d9da7b811",
            "8b08edd7-bd02-4d99-99b7-f4564e0f858f",
            "9512ab9d-9e7a-47a9-a116-595709510c42",
            48
        ],
        "options": {}
    },
    "16": {
        "id": 16,
        "class": "Subtree",
        "name": "Tell a joke",
        "asset-pack": "core",
        "parent": "d8f2f57c-0e64-4a1a-b3d2-c3d9687a437a",
        "decorators": [],
        "options": {
            "behaviorPath": "TellOneJoke.bt",
            "getNotepad": [
                "() => {",
                "//    console.log('KnockKnock.bt: entering TellOneJoke.bt');",
                "    return {",
                "      mimsPath: notepad.mimsPath,",
                "      rulesPath: notepad.rulesPath,",
                "      explain: notepad.explain",
                "    };",
                "}"
            ],
            "onResult": [
                "(treeResult) => {",
                "  console.log(treeResult.explain,notepad.explain);",
                "  notepad.explain=treeResult.explain; //Assume they got an explanation if they needed one.",
                "  console.log(notepad.explain);",
                "}"
            ]
        }
    },
    "20": {
        "id": 20,
        "class": "Subtree",
        "name": "Hear a joke",
        "asset-pack": "core",
        "parent": "d8f2f57c-0e64-4a1a-b3d2-c3d9687a437a",
        "skipped": false,
        "decorators": [],
        "options": {
            "behaviorPath": "HearAJoke.bt",
            "getNotepad": [
                "() => {",
                "//    console.log('KnockKnock.bt: entering HearAJoke.bt');",
                "    return {",
                "        mimsPath: notepad.mimsPath,",
                "        rulesPath: notepad.rulesPath",
                "    };",
                "}"
            ],
            "onResult": [
                "(treeResult) => {",
                "}"
            ]
        }
    },
    "22": {
        "id": 22,
        "class": "TextToSpeech",
        "name": "",
        "asset-pack": "core",
        "parent": "d8f2f57c-0e64-4a1a-b3d2-c3d9687a437a",
        "options": {
            "words": "Now will you please tell me a knock knock joke?",
            "onWord": [
                "(word) => {",
                "}"
            ]
        }
    },
    "23": {
        "id": 23,
        "class": "TimeoutJs",
        "name": "Wait 5 seconds",
        "asset-pack": "core",
        "parent": 1,
        "options": {
            "getTime": [
                "() => {",
                "    return 5000;",
                "}"
            ]
        },
        "skipped": true
    },
    "41": {
        "id": 41,
        "class": "ExecuteScript",
        "name": "Set up paths",
        "asset-pack": "core",
        "parent": 1,
        "options": {
            "exec": [
                "() => {",
                "//  console.log('KnockKnock.bt');",
                "//  console.log('setting up paths');",
                "  if (!notepad.rulesPath || ! notepad.mimsPath) {",
                "    let path = require('path');    ",
                "    if (!notepad.rulesPath) {",
                "      notepad.rulesPath = path.resolve(__dirname, '../rules/KnockKnock');",
                "    }",
                "    if (!notepad.mimsPath) {",
                "      notepad.mimsPath = path.resolve(__dirname, '../mims/KnockKnock');",
                "    }",
                "  }",
                "  ",
                "//  console.log(\"KnockKnock.bt: notepad.rulesPath=\"+notepad.rulesPath);",
                "//  console.log(\"KnockKnock.bt: notepad.mimsPath=\"+notepad.mimsPath);",
                "}",
                ""
            ]
        }
    },
    "48": {
        "id": 48,
        "class": "TextToSpeech",
        "name": "Thanks for playing",
        "asset-pack": "core",
        "parent": 1,
        "options": {
            "words": "Thanks for playing knock knock jokes with me. It really makes my day!",
            "onWord": [
                "(word) => {",
                "}"
            ]
        }
    },
    "49": {
        "id": 49,
        "class": "Sequence",
        "name": "Prompt for explanation",
        "asset-pack": "core",
        "parent": "12d190f3-57ef-40b3-bd49-c54cf462f001",
        "children": [
            "c530fb4a-0f03-44e2-be73-62fa713f2824",
            50
        ],
        "options": {}
    },
    "50": {
        "id": 50,
        "class": "Mim",
        "name": "\"Do you know how knock knock jokes work?\"",
        "asset-pack": "project",
        "parent": 49,
        "decorators": [
            54
        ],
        "options": {
            "getConfig": [
                "() =>  {",
                "//\tconsole.log('need explanation?');",
                "\treturn {",
                "\t\tmimId: 'KnockKnockNeedExplanation',",
                "\t\trulesPath: notepad.rulesPath,",
                "\t\tmimsPath: notepad.mimsPath,",
                "\t\trule: \"TopRule = $* $factory:yes_no{response=yes_no._nl} $*;\",",
                "\t\tincremental: false,",
                "\t\tdetectEnd: true,",
                "\t}",
                "}"
            ],
            "onStatus": [
                "(status) =>  {",
                "}"
            ],
            "onResults": [
                "(results) =>  {",
                "  //console.log(`KnockKnock.bt: KnockKnockNeedExplanation: onResults: `);",
                "  //console.log(results);",
                "  ",
                "  if (results.speakerIds.primarySpeaker) {",
                "    notepad.userName = results.speakerIds.primarySpeaker;",
                "  }",
                "  ",
                "  //console.log(results.asrResults, `State: ${results.asrResults.state}`, results.asrResults);",
                "  if (results.asrResults.state === 'match') {",
                "    notepad.explain=(results.asrResults.nlParse.response==='yes')?false:true; //\"yes\" I understand means no explanation.",
                "    notepad.KnockKnockNeedExplanationBreak=true;",
                "  } ",
                "  ",
                "}"
            ]
        }
    },
    "54": {
        "id": 54,
        "class": "WhileCondition",
        "name": "",
        "asset-pack": "core",
        "options": {
            "init": [
                "() => {",
                "}"
            ],
            "conditional": [
                "() => {",
                "    return !notepad.KnockKnockNeedExplanationBreak;",
                "}"
            ]
        }
    },
    "meta": {
        "version": 1
    },
    "60bad574-869a-4817-94be-d38d9da7b811": {
        "id": "60bad574-869a-4817-94be-d38d9da7b811",
        "class": "Subtree",
        "name": "Idle",
        "options": {
            "behaviorPath": "attitudes/idle.bt",
            "getNotepad": [
                "() => {",
                "//  console.log('idle');",
                "",
                "    return {};",
                "}"
            ],
            "onResult": [
                "(treeResult) => {",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 1
    },
    "8b08edd7-bd02-4d99-99b7-f4564e0f858f": {
        "id": "8b08edd7-bd02-4d99-99b7-f4564e0f858f",
        "class": "Parallel",
        "name": "Do the jokes",
        "options": {
            "succeedOnOne": false
        },
        "asset-pack": "core",
        "parent": 1,
        "children": [
            "0389a080-c084-4ed1-b540-a1ed7fb88f31",
            "98a99ed9-3e45-4143-b8fb-427aa3ae5d53",
            "12d190f3-57ef-40b3-bd49-c54cf462f001"
        ],
        "decorators": [
            "f4db2668-4a0f-4e37-9022-40b2aabfef0d",
            "3d58655d-b355-4c67-b8e4-e36089bf6380"
        ]
    },
    "98a99ed9-3e45-4143-b8fb-427aa3ae5d53": {
        "id": "98a99ed9-3e45-4143-b8fb-427aa3ae5d53",
        "class": "Sequence",
        "name": "Posture",
        "options": {},
        "asset-pack": "core",
        "parent": "8b08edd7-bd02-4d99-99b7-f4564e0f858f",
        "children": [
            "b5723c3b-34c9-4532-8a6d-c824603dd138"
        ],
        "skipped": false
    },
    "12d190f3-57ef-40b3-bd49-c54cf462f001": {
        "id": "12d190f3-57ef-40b3-bd49-c54cf462f001",
        "class": "Sequence",
        "name": "Jokes",
        "options": {},
        "asset-pack": "core",
        "parent": "8b08edd7-bd02-4d99-99b7-f4564e0f858f",
        "children": [
            49,
            "d8f2f57c-0e64-4a1a-b3d2-c3d9687a437a"
        ],
        "skipped": false
    },
    "3d58655d-b355-4c67-b8e4-e36089bf6380": {
        "id": "3d58655d-b355-4c67-b8e4-e36089bf6380",
        "class": "WhileCondition",
        "name": "",
        "options": {
            "init": [
                "() => {",
                "  notepad.DoTheJokesBreak=false;",
                "}"
            ],
            "conditional": [
                "() => {",
                "    return !notepad.DoTheJokesBreak;",
                "}"
            ]
        },
        "asset-pack": "core"
    },
    "b5723c3b-34c9-4532-8a6d-c824603dd138": {
        "id": "b5723c3b-34c9-4532-8a6d-c824603dd138",
        "class": "Subtree",
        "name": "posture.bt",
        "options": {
            "behaviorPath": "attitudes/posture.bt",
            "getNotepad": [
                "() => {",
                "//  console.log('KnockKnock.bt: entering posture.bt');",
                "  return {};",
                "}"
            ],
            "onResult": [
                "(treeResult) => {",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": "98a99ed9-3e45-4143-b8fb-427aa3ae5d53"
    },
    "9512ab9d-9e7a-47a9-a116-595709510c42": {
        "id": "9512ab9d-9e7a-47a9-a116-595709510c42",
        "class": "Subtree",
        "name": "Center",
        "options": {
            "behaviorPath": "attitudes/center.bt",
            "getNotepad": [
                "() => {",
                "//  console.log('KnockKnock.bt: entering center.bt');",
                "    return {};",
                "}"
            ],
            "onResult": [
                "(treeResult) => {",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 1
    },
    "d8f2f57c-0e64-4a1a-b3d2-c3d9687a437a": {
        "id": "d8f2f57c-0e64-4a1a-b3d2-c3d9687a437a",
        "class": "Sequence",
        "name": "",
        "options": {},
        "asset-pack": "core",
        "parent": "12d190f3-57ef-40b3-bd49-c54cf462f001",
        "children": [
            16,
            22,
            20
        ],
        "decorators": [
            "8c2974a4-d5c4-4ac9-b5ad-ea051ac5cfae"
        ]
    },
    "8c2974a4-d5c4-4ac9-b5ad-ea051ac5cfae": {
        "id": "8c2974a4-d5c4-4ac9-b5ad-ea051ac5cfae",
        "class": "WhileCondition",
        "name": "",
        "options": {
            "init": [
                "() => {",
                "}"
            ],
            "conditional": [
                "() => {",
                "    return true;",
                "}"
            ]
        },
        "asset-pack": "core"
    },
    "0389a080-c084-4ed1-b540-a1ed7fb88f31": {
        "id": "0389a080-c084-4ed1-b540-a1ed7fb88f31",
        "class": "Listen",
        "name": "",
        "options": {
            "getOptions": [
                "() => {",
                "    let options = {",
                "        heyJibo: false,",
                "        detectEnd: false,",
                "        incremental: false,",
                "        authenticateSpeaker: ''",
                "    }",
                "    return options;",
                "}"
            ],
            "rule": "KnockKnock/KnockKnockImDone.rule",
            "onResult": [
                "(listener) => {",
                "    listener.on('cloud', function(asrResult, speakerIds) {",
                "      if (asrResult.NLParse) {",
                "        notepad.DoTheJokesBreak=true;",
                "        console.log('should break from the loop!');",
                "      }",
                "    });",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": "8b08edd7-bd02-4d99-99b7-f4564e0f858f",
        "decorators": [
            "35292819-7a6f-4368-b12c-8075715e6702"
        ],
        "skipped": true
    },
    "35292819-7a6f-4368-b12c-8075715e6702": {
        "id": "35292819-7a6f-4368-b12c-8075715e6702",
        "class": "WhileCondition",
        "name": "",
        "options": {
            "init": [
                "() => {",
                "}"
            ],
            "conditional": [
                "() => {",
                "    return true;",
                "}"
            ]
        },
        "asset-pack": "core"
    },
    "f4db2668-4a0f-4e37-9022-40b2aabfef0d": {
        "id": "f4db2668-4a0f-4e37-9022-40b2aabfef0d",
        "class": "SucceedOnEmbedded",
        "name": "",
        "options": {
            "rule": "hey_jibo",
            "onResult": [
                "(listener) => {",
                "\tlistener.on('hey-jibo', function(asrResult, speakerIds) {",
                "",
                "\t});",
                "}"
            ]
        },
        "asset-pack": "core"
    },
    "6c3265de-4a80-430b-b2e9-5e5023f545b6": {
        "id": "6c3265de-4a80-430b-b2e9-5e5023f545b6",
        "class": "ExecuteScript",
        "name": "Set up reactions",
        "options": {
            "exec": [
                "() => {",
                "  if (blackboard.reactions===undefined) {",
                "//    console.log('instantiating Reactions');",
                "    let Reactions = require('../src/knock-knock/reactions');",
                "    blackboard.reactions = new Reactions;",
                "//    console.log(blackboard.reactions);",
                "  }",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 1,
        "skipped": false
    },
    "c530fb4a-0f03-44e2-be73-62fa713f2824": {
        "id": "c530fb4a-0f03-44e2-be73-62fa713f2824",
        "class": "ExecuteScript",
        "name": "",
        "options": {
            "exec": [
                "() => {",
                "  notepad.KnockKnockNeedExplanationBreak=false;",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 49
    },
    "1e9d0b64-7a88-498c-88a0-f7ee381634d6": {
        "id": "1e9d0b64-7a88-498c-88a0-f7ee381634d6",
        "class": "ExecuteScriptAsync",
        "name": "Set up jokes",
        "options": {
            "exec": [
                "(succeed, fail) => {",
                "  //  console.log('setting up jokes');",
                "    let JokeRepo = require('../src/knock-knock/joke-repo');",
                "    blackboard.jokes = new JokeRepo;",
                "    blackboard.jokes.loadNewJokes(succeed);",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 1
    },
    "e62f5c3b-9562-4634-b99d-b06bc5e260a5": {
        "id": "e62f5c3b-9562-4634-b99d-b06bc5e260a5",
        "class": "ExecuteScript",
        "name": "Set up people",
        "options": {
            "exec": [
                "() => {",
                "  //There's not much too this right now, but I expect to add more later.",
                "  //At some point, I'll store whether a user needs an explanation in the people database.",
                "  //For now, I'm going to start by assuming they do, then ask.",
                "  notepad.explain=true;",
                "}"
            ]
        },
        "asset-pack": "core",
        "parent": 1
    }
}